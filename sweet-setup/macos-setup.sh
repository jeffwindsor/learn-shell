#!/bin/bash
###############################################################################
# generated by src/generate-scripts.sh
###############################################################################
# * Auto execute with this script with this command: bash <(curl -L {url-to-raw-file})
# inlined from src/data-variables.sh
fish_function_path="${HOME}/.config/fish/functions"
bash_config_file="${HOME}/.bashrc"
source_dir="${HOME}/src"
###############################################################################
# inlined from src/includes/ascii-art/macos.sh
#                                                   $MMMMMMMMM       :MMMMMMMMM
#                                                 ,MMMMO  ,MMMMM    MMMM:   MMMM
#                                                 MMM7       MMMM   MMM       MMM
# MMM MMMMMM 8MMMMMM    $MMMMMMMO     MMMMMMMN   MMMO         MMM:  MMM
# MMMM7 ~MMMMM= ?MMMM  MMMM   MMMM  MMMM~  MMMM  MMM          MMMM  MMMMMM=
# MMM     MMM     MMM  ,,,     MMM  MMM     ~MMZ MMM          ~MMM   ~MMMMMMMMM
# MMM     MMM     MMM     MMMMMMMM OMMN          MMM          ZMMM        ?MMMMMM
# MMM     MMM     MMM  MMMMMMMMMMM NMMD          MMMI         MMM~            MMM
# MMM     MMM     MMM MMMM     MMM  MMM      MMD ,MMM        MMMM  MMM:       MMM
# MMM     MMM     MMM DMMM    MMMM  MMMM    MMM   MMMMM    NMMMM    MMMM    ,MMMM
# MMM     MMM     MMM  MMMMMMM MMM   7MMMMMMMM      MMMMMMMMMM+      MMMMMMMMMM:
#                         ~             ,I?             $8+             :O8+

###############################################################################
# inlined from src/includes/macos/development-macos.sh
function install.macos_devtools(){
  add_package_cask iterm2
  add_package_cask google-chrome
  add_package bash
  add_package coreutils
  add_package wget
}
function install.google_chrome(){
  add_package_cask google-chrome
}
function install.bash_git_prompt(){
  add_package bash-git-prompt
  echo "if [ -f "$(brew --prefix bash-git-prompt)/share/gitprompt.sh" ]; then
    GIT_PROMPT_THEME=Default
    source "$(brew --prefix bash-git-prompt)/share/gitprompt.sh"
fi
export GIT_PROMPT_ONLY_IN_REPO=1
export GIT_PROMPT_FETCH_REMOTE_STATUS=0" >> ~/.profile
}
###############################################################################
# inlined from src/includes/macos/package-mgmt-macos.sh
function add_package(){
  brew install "$@"
}
function package_update(){
  brew update;
  brew upgrade;
  brew prune;
  brew cleanup;
  brew doctor;
}
function add_package_cask(){
  brew cask install "$@"
}
function preinstall.homebrew(){
  if command_exists brew; then
      echo -e "==>\e[38;5;39m Homebrew already installed... updating \e[0m"
      package_update;
  else
      echo -e "==>\e[38;5;39m Adding Homebrew \e[0m"
      # https://brew.sh/
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)";
  fi
  ###############################################################################
  echo -e "==>\e[38;5;39m Adding Cask Support \e[0m"
  # https://caskroom.github.io/
  brew cask caskroom/cask
  brew cask caskroom/versions
}
###############################################################################
# inlined from src/includes/macos/preferences-macos.sh
function postinstall.set_macos_preferences(){
  # ? fill this in
}
###############################################################################
# inlined from src/includes/macos/vscode-macos.sh
function install.visual_studio_code(){
  # https://aur.archlinux.org/packages/visual-studio-code-bin
  add_package_cask visual-studio-code
}
###############################################################################
# inlined from src/includes/ascii-art/development.sh

###############################################################################
# inlined from src/includes/development/haskell-stack.sh
function install.haskell_stack(){
  curl -sSL https://get.haskellstack.org/ | sh
  # Green imports, White On Blue Prompt
  #set hprompt ":set prompt \"\ESC[32m\STX%s\ESC[0m\STX\n\STX\ESC[44m\STX\ESC[97m\STX λ \ESC[m\STX\ESC[34m \ESC[m\STX\""
  # Grey imports, Red and Grey haskell symbol
  set hprompt ":set prompt \"\ESC[38;5;242m\STX%s\n\ESC[38;5;161m❯\ESC[1;34mλ= \ESC[0m\""
  echo $hprompt > "${HOME}/.ghci"
  #used for ide interactions
  stack build intero
}
###############################################################################
# inlined from src/includes/development/jq.sh
function install.jq(){
  add_package jq
}
###############################################################################
# inlined from src/includes/development/node.sh
function install.node(){
  add_package node
}
###############################################################################
# inlined from src/includes/development/python3.sh
function install.python3(){
  add_package python3
  add_package pylint
}
###############################################################################
# inlined from src/includes/development/react-redux.sh
function install.react_redux(){
  npm install -g create-react-app
  npm install -g redux
}
###############################################################################
# inlined from src/includes/development/vscode-install-exts.sh
# generated by src/generate-includes.sh

function install.vscode_install_exts(){
  code --install-extension "nonylene.dark-molokai-theme"
  code --install-extension "equinusocio.vsc-material-theme"
  code --install-extension "pkief.material-icon-theme"
  code --install-extension "eamodio.gitlens"
  code --install-extension "skyapps.fish-vscode"
  code --install-extension "DavidAnson.vscode-markdownlint"
  code --install-extension "aaron-bond.better-comments"
  code --install-extension "wmaurer.change-case"
  code --install-extension "tomoki1207.pdf"
  code --install-extension "justusadam.language-haskell"
  code --install-extension "Vans.haskero"
  code --install-extension "jcanero.hoogle-vscode"
  code --install-extension "ms-python.python"
  code --install-extension "msjsdiag.debugger-for-chrome"
  code --install-extension "dbaeumer.vscode-eslint"
  code --install-extension "joelday.docthis"
  code --install-extension "xabikos.javascriptsnippets"
  code --install-extension "leizongmin.node-module-intellisense"
  code --install-extension "esbenp.prettier-vscode"
  code --install-extension "eg2.tslint,"
  code --install-extension "nwolverson.ide-purescript,"
  code --install-extension "streetsidesoftware.code-spell-checker"
}

###############################################################################
# inlined from src/includes/ascii-art/fish.sh
#                ___
#  ___======____=---=)
#/T            \_--===)
#[ \ (O)   \~    \_-==)
# \      / )J~~    \-=)
#  \\___/  )JJ~~~   \)
#   \_____/JJJ~~~~    \
#   / \  , \J~~~~~     \
#  (-\)\=|\\\~~~~       L__
#  (\\)  (\\\)_           \==__
#   \V    \\\) ===_____   \\\\\\
#          \V)     \_) \\\\JJ\J\)
#                      /J\JT\JJJJ)
#                      (JJJ| \UUU)
#                       (UU)

###############################################################################
# inlined from src/includes/fish/fish-as-default.sh
function postinstall.set_fish_shell_as_default(){
  if ! grep -q "/usr/bin/fish" /etc/shells; then
      sudo echo "/usr/bin/fish" >> /etc/shells
  fi
  sudo chsh -s /usr/bin/fish
}
###############################################################################
# inlined from src/includes/fish/fish-git-aliases.sh
# generated by src/generate-includes.sh

function install.fish-git-aliases(){
  echo -e "function gs
  git status -sb --ignore-submodules
end" > ${fish_function_path}/gs.fish
  echo -e "function gd
  git diff
end" > ${fish_function_path}/gd.fish
  echo -e "function gaa
  git add --all
end" > ${fish_function_path}/gaa.fish
  echo -e "function gcm
  git commit -m
end" > ${fish_function_path}/gcm.fish
  echo -e "function gcma
  git commit -a -m
end" > ${fish_function_path}/gcma.fish
  echo -e "function gb
  git branch
end" > ${fish_function_path}/gb.fish
  echo -e "function gco
  git checkout
end" > ${fish_function_path}/gco.fish
  echo -e "function gcob
  git checkout -b
end" > ${fish_function_path}/gcob.fish
  echo -e "function gpff
  git pull --ff-only
end" > ${fish_function_path}/gpff.fish
  echo -e "function gmff
  git merge --ff-only
end" > ${fish_function_path}/gmff.fish
  echo -e "function gsize
  git count-objects -vH
end" > ${fish_function_path}/gsize.fish
  echo -e "function gremove
  git rm -r --cached .
end" > ${fish_function_path}/gremove.fish
  echo -e "function ghist
  git log --graph --max-count=100 --pretty=format:\"%C(green)%h%C(reset) | %C(yellow)%d%C(reset) %s %C(cyan)%an : %C(dim)%cr%C(reset)\" --abbrev-commit
end" > ${fish_function_path}/ghist.fish
}

###############################################################################
# inlined from src/includes/fish/fish-git-workflow-cj.sh
# generated by src/generate-includes.sh

function install.fish-git-workflow-cj(){
  echo -e "function cpush
  git push
end" > ${fish_function_path}/cpush.fish
  echo -e "function cpull
  git pull --rebase --prune
git submodule update --init --recursive
end" > ${fish_function_path}/cpull.fish
  echo -e "function cundo
  git reset HEAD~1 --mixed
end" > ${fish_function_path}/cundo.fish
  echo -e "function creset
  git add -A
git commit -qm 'CLEAN POINT'
git reset HEAD~1 --hard
git clean -f -d
end" > ${fish_function_path}/creset.fish
  echo -e "function cinit
  git init
gi osx >> .gitignore
echo \"# READ.ME\" >> README.md
gcommit \"Initial\"
if test -n \$argv
  gconnect \$repo_uri
  git push -u origin master
end
end" > ${fish_function_path}/cinit.fish
  echo -e "function cconnect
  git remote add origin \$argv
git remote -v
end" > ${fish_function_path}/cconnect.fish
  echo -e "function cbranch
  git checkout -b \$argv
end" > ${fish_function_path}/cbranch.fish
  echo -e "function ccommit
  git add -A
if test -n \"\$argv\"
      git commit -m \"\$argv\"
  else
      git commit -m \"WIP\"
  end
end" > ${fish_function_path}/ccommit.fish
  echo -e "function cmerge
  set merge_branch (git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
git checkout master
gpull
git rebase -i master
git merge \$merge_branch
end" > ${fish_function_path}/cmerge.fish
}

###############################################################################
# inlined from src/includes/fish/fish-git-workflow.sh
# generated by src/generate-includes.sh

function install.fish-git-workflow(){
  echo -e "function gpush
  git push
end" > ${fish_function_path}/gpush.fish
  echo -e "function gpull
  git pull --rebase --prune git submodule update --init --recursive
end" > ${fish_function_path}/gpull.fish
  echo -e "function gundo
  git reset HEAD~1 --mixed
end" > ${fish_function_path}/gundo.fish
  echo -e "function greset
  git add -A
  git commit -qm 'CLEAN POINT'
  git reset HEAD~1 --hard
  git clean -f -d
end" > ${fish_function_path}/greset.fish
  echo -e "function ginit
  git init
  gi osx >> .gitignore
  echo \"READ.ME\" >> README.md
  gcommit \"Initial\"
  if test -n \$argv
    gconnect \$repo_uri
    git push -u origin master
  end
end" > ${fish_function_path}/ginit.fish
  echo -e "function gconnect
  git remote add origin \$argv
  git remote -v
end" > ${fish_function_path}/gconnect.fish
  echo -e "function gbranch
  git checkout -b \$argv
end" > ${fish_function_path}/gbranch.fish
  echo -e "function gcommit
  git add -A
  if test -n \"\$argv\"
        git commit -m \"\$argv\"
    else
        git commit -m \"WIP\"
    end
end" > ${fish_function_path}/gcommit.fish
  echo -e "function gmerge
  set merge_branch (git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
  git checkout master
  gpull
  git rebase -i master
  git merge \$merge_branch
end" > ${fish_function_path}/gmerge.fish
  echo -e "function gtrack
  git checkout --track origin/
end" > ${fish_function_path}/gtrack.fish
}

###############################################################################
# inlined from src/includes/fish/fish-installs.sh
function install.fish_shell(){
  add_package fish
}
function install.fish_greeting(){
  # Cloning Powerline Fonts used for some prompts in OMF
  git clone https://github.com/powerline/fonts.git "$source_dir/sys/fonts/powerline" --depth=1

  add_package lolcat
  # fortunes located: (mac)/usr/local/share/games/fortunes (linux)/usr/share/games/fortunes
  # generate file by: strfile mytextfile quotes.dat
  add_package fortune-mod
  curl -L https://raw.githubusercontent.com/jeffwindsor/the-sweet-setup/master/src/parts/fortunes/personal-sayings > /usr/local/share/games/fortunes/personal-sayings
  curl -L https://raw.githubusercontent.com/jeffwindsor/the-sweet-setup/master/src/parts/fortunes/personal-sayings.dat > /usr/local/share/games/fortunes/personal-sayings.dat

  # Fish shell greeting - stored as a function
  generate_fish_function "fish_greeting" "fish_logo red brred yellow\n  fortune | lolcat"
}
function install.fish_omf(){
  # OH MY FISH FRAMEWORK
  curl -L https://get.oh-my.fish | fish
}
###############################################################################
# inlined from src/includes/fish/fish-shell-aliases.sh
# generated by src/generate-includes.sh

function install.fish-shell-aliases(){
  echo -e "function l
  builtin ls -CF
end" > ${fish_function_path}/l.fish
  echo -e "function ls
  builtin ls -CF
end" > ${fish_function_path}/ls.fish
  echo -e "function ll
  builtin ls -lhA
end" > ${fish_function_path}/ll.fish
  echo -e "function lll
  builtin ls -lhFA | less
end" > ${fish_function_path}/lll.fish
  echo -e "function o
  builtin open .
end" > ${fish_function_path}/o.fish
  echo -e "function c
  code .
end" > ${fish_function_path}/c.fish
  echo -e "function cd..
  cd ..
end" > ${fish_function_path}/cd...fish
  echo -e "function ...
  cd ../../
end" > ${fish_function_path}/....fish
  echo -e "function ....
  cd ../../../
end" > ${fish_function_path}/.....fish
  echo -e "function .....
  cd ../../../../
end" > ${fish_function_path}/......fish
}

###############################################################################
# inlined from src/includes/ascii-art/bash.sh
#
#                       /^--^\     /^--^\     /^--^\
#   bash                \____/     \____/     \____/
#                      /      \   /      \   /      \
#                     |        | |        | |        |
#                      \__  __/   \__  __/   \__  __/
# |^|^|^|^|^|^|^|^|^|^|^|^\ \^|^|^|^/ /^|^|^|^|^\ \^|^|^|^|^|^|^|^|^|^|^|^|
# | | | | | | | | | | | | |\ \| | |/ /| | | | | | \ \ | | | | | | | | | | |
# ########################/ /######\ \###########/ /#######################
# | | | | | | | | | | | | \/| | | | \/| | | | | |\/ | | | | | | | | | | | |
# |_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|_|
#

###############################################################################
# inlined from src/includes/bash/bash-git-aliases.sh
# generated by src/generate-includes.sh

function install.bash-git-aliases(){
  echo -e "function gs(){
  git status -sb --ignore-submodules
}" > ${bash_config_file}
  echo -e "function gd(){
  git diff
}" > ${bash_config_file}
  echo -e "function gaa(){
  git add --all
}" > ${bash_config_file}
  echo -e "function gcm(){
  git commit -m
}" > ${bash_config_file}
  echo -e "function gcma(){
  git commit -a -m
}" > ${bash_config_file}
  echo -e "function gb(){
  git branch
}" > ${bash_config_file}
  echo -e "function gco(){
  git checkout
}" > ${bash_config_file}
  echo -e "function gcob(){
  git checkout -b
}" > ${bash_config_file}
  echo -e "function gpff(){
  git pull --ff-only
}" > ${bash_config_file}
  echo -e "function gmff(){
  git merge --ff-only
}" > ${bash_config_file}
  echo -e "function gsize(){
  git count-objects -vH
}" > ${bash_config_file}
  echo -e "function gremove(){
  git rm -r --cached .
}" > ${bash_config_file}
  echo -e "function ghist(){
  git log --graph --max-count=100 --pretty=format:\"%C(green)%h%C(reset) | %C(yellow)%d%C(reset) %s %C(cyan)%an : %C(dim)%cr%C(reset)\" --abbrev-commit
}" > ${bash_config_file}
}

###############################################################################
# inlined from src/includes/bash/bash-git-workflow-cj.sh
# generated by src/generate-includes.sh

function install.bash-git-workflow-cj(){
  echo -e "function cpush(){
  git push
}" > ${bash_config_file}
  echo -e "function cpull(){
  git pull --rebase --prune
git submodule update --init --recursive
}" > ${bash_config_file}
  echo -e "function cundo(){
  git reset HEAD~1 --mixed
}" > ${bash_config_file}
  echo -e "function creset(){
  git add -A
git commit -qm 'CLEAN POINT'
git reset HEAD~1 --hard
git clean -f -d
}" > ${bash_config_file}
  echo -e "function cinit(){
  git init
gi osx >> .gitignore
echo \"# READ.ME\" >> README.md
gcommit \"Initial\"
if test -n \$argv
  gconnect \$repo_uri
  git push -u origin master
end
}" > ${bash_config_file}
  echo -e "function cconnect(){
  git remote add origin \$argv
git remote -v
}" > ${bash_config_file}
  echo -e "function cbranch(){
  git checkout -b \$argv
}" > ${bash_config_file}
  echo -e "function ccommit(){
  git add -A
if test -n \"\$argv\"
      git commit -m \"\$argv\"
  else
      git commit -m \"WIP\"
  end
}" > ${bash_config_file}
  echo -e "function cmerge(){
  set merge_branch (git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
git checkout master
gpull
git rebase -i master
git merge \$merge_branch
}" > ${bash_config_file}
}

###############################################################################
# inlined from src/includes/bash/bash-git-workflow.sh
# generated by src/generate-includes.sh

function install.bash-git-workflow(){
  echo -e "function gpush(){
  git push
}" > ${bash_config_file}
  echo -e "function gpull(){
  git pull --rebase --prune git submodule update --init --recursive
}" > ${bash_config_file}
  echo -e "function gundo(){
  git reset HEAD~1 --mixed
}" > ${bash_config_file}
  echo -e "function greset(){
  git add -A
  git commit -qm 'CLEAN POINT'
  git reset HEAD~1 --hard
  git clean -f -d
}" > ${bash_config_file}
  echo -e "function ginit(){
  git init
  gi osx >> .gitignore
  echo \"READ.ME\" >> README.md
  gcommit \"Initial\"
  if test -n \$argv
    gconnect \$repo_uri
    git push -u origin master
  end
}" > ${bash_config_file}
  echo -e "function gconnect(){
  git remote add origin \$argv
  git remote -v
}" > ${bash_config_file}
  echo -e "function gbranch(){
  git checkout -b \$argv
}" > ${bash_config_file}
  echo -e "function gcommit(){
  git add -A
  if test -n \"\$argv\"
        git commit -m \"\$argv\"
    else
        git commit -m \"WIP\"
    end
}" > ${bash_config_file}
  echo -e "function gmerge(){
  set merge_branch (git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
  git checkout master
  gpull
  git rebase -i master
  git merge \$merge_branch
}" > ${bash_config_file}
  echo -e "function gtrack(){
  git checkout --track origin/
}" > ${bash_config_file}
}

###############################################################################
# inlined from src/includes/bash/bash-shell-aliases.sh
# generated by src/generate-includes.sh

function install.bash-shell-aliases(){
  echo -e "function l(){
  builtin ls -CF
}" > ${bash_config_file}
  echo -e "function ls(){
  builtin ls -CF
}" > ${bash_config_file}
  echo -e "function ll(){
  builtin ls -lhA
}" > ${bash_config_file}
  echo -e "function lll(){
  builtin ls -lhFA | less
}" > ${bash_config_file}
  echo -e "function o(){
  builtin open .
}" > ${bash_config_file}
  echo -e "function c(){
  code .
}" > ${bash_config_file}
  echo -e "function cd..(){
  cd ..
}" > ${bash_config_file}
  echo -e "function ...(){
  cd ../../
}" > ${bash_config_file}
  echo -e "function ....(){
  cd ../../../
}" > ${bash_config_file}
  echo -e "function .....(){
  cd ../../../../
}" > ${bash_config_file}
}

###############################################################################
# inlined from src/includes/bash/bash.sh
function install.bash_shell(){
  add_package bash
}
function install.bash_git_aliases(){
  process.delimited_tuple_list_with_prepend \
    $alias_delimiter generate.bash_alias "g" "git " "${git_aliases[@]}"
}
function install.bash_shell_aliases(){
  process.delimited_tuple_list \
    $alias_delimiter generate.bash_alias "${shell_aliases[@]}"
}
function install.bash_greeting(){
  # ? TODO install a bash prompt
  # ? add_package lolcat
  # ? add_package fortune-mod
  # ?
}
###############################################################################
# inlined from src/includes/ascii-art/git.sh
#         .-ossyyyysso-.         yyyyyy,         oooooo,
#      .ssyyyyyyyyyyyyyyss:      yyyyyy,         oooooo,
#    .+yyyyyyyyyyyyyyyyyyyy:.    yyyyyy,         oooooo,
#   .yyyyyyyys.````.syyyyyyy:.   yyyyyy,         oooooo,
#  .yyyyyyy:          +yyyyyy:   yyyyyy,         oooooo,
#  oyyyyyy-            ......`   yyyyyy,         oooooo,
#  yyyyyys                       yyyyyy,  oooooooooooooooooooo
# :yyyyyy+       yyyyyyyyyyyy,   yyyyyy,  oooooooooooooooooooo
# .yyyyyyo       yyyyyyyyyyyy,   yyyyyy,  oooooooooooooooooooo
#  yyyyyyy`      ``````.syyyy,   yyyyyy,         oooooo,``````
#  :yyyyyys.          .:yyyyy,   yyyyyy,         oooooo,
#   :yyyyyyy:.      .:oyyyyyy,   yyyyyy,         oooooo,
#    :yyyyyyyyyyyyyyyyyyyyyyy,   yyyyyy,         oooooo,
#     `:syyyyyyyyyyyyyy: yyyy,   yyyyyy,         oooooo,
#        `:+ossyyssoo-`  yyyy,   yyyyyy,         oooooo,

###############################################################################
# inlined from src/includes/git/git-globals.sh
# generated by src/generate-includes.sh

function install.git_global_aliases(){
  git config --global alias.s "status -sb --ignore-submodules"
  git config --global alias.d "diff"
  git config --global alias.aa "add --all"
  git config --global alias.cm "commit -m"
  git config --global alias.cma "commit -a -m"
  git config --global alias.b "branch"
  git config --global alias.co "checkout"
  git config --global alias.cob "checkout -b"
  git config --global alias.pff "pull --ff-only"
  git config --global alias.mff "merge --ff-only"
  git config --global alias.size "count-objects -vH"
  git config --global alias.remove "rm -r --cached ."
  git config --global alias.hist "log --graph --max-count=100 --pretty=format:\"%C(green)%h%C(reset) | %C(yellow)%d%C(reset) %s %C(cyan)%an : %C(dim)%cr%C(reset)\" --abbrev-commit"
}

###############################################################################
# inlined from src/includes/git/git-installs.sh
function install.git(){
  add_package git
  add_package hub

  # ? SOLVE HOW TO GET THESE AND BE GENERIC ?
  #git config --global user.name "$name"
  #git config --global user.email "$email"
}
###############################################################################
#create a list of install functions to confirm
installs+=($(compgen -A function | grep "preinstall\."));
installs+=($(compgen -A function | grep "install\."));
installs+=($(compgen -A function | grep "postinstall\."));
#confirm each script with user
for f in "${installs[@]}"; do
  echo -n "$f [y/N]: "; read -e answer;
  if [ "$answer" == "y" ]; then
    confirmed_installs+=( "${f}" )
  fi
done
#execute each confirmed script
for c in "${confirmed_installs[@]}"; do
  echo -e "\e[48;5;4m\e[38;5;4m$(seq -s '-' 1 $(tput cols) | tr -d '[:digit:]')\e[0m"
  echo -e "\e[38;5;250m \e[38;5;4m ${c} \e[0m";
  echo -e;
  $c;
done